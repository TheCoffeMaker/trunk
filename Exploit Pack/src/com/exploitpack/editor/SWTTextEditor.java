/**
Exploit Pack - Security Framework for Exploit Developers
Copyright 2011 Juan Sacco http://exploitpack.com

This program is free software: you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation, either version 3 
or any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. 
If not, see http://www.gnu.org/licenses/
 **/

package com.exploitpack.editor;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.layout.FormAttachment;
import org.eclipse.swt.layout.FormData;
import org.eclipse.swt.layout.FormLayout;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Dialog;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.FileDialog;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.Menu;
import org.eclipse.swt.widgets.MenuItem;
import org.eclipse.swt.widgets.MessageBox;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.TabFolder;
import org.eclipse.swt.widgets.TabItem;
import org.eclipse.swt.widgets.Text;
import org.eclipse.swt.widgets.ToolBar;
import org.eclipse.swt.widgets.ToolItem;
import org.eclipse.wb.swt.SWTResourceManager;

public class SWTTextEditor {
  Display d;

  Shell s;
  private Text Module;

  SWTTextEditor() {
    d = new Display();
    s = new Shell(d);
    s.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/1316133906_package.png"));
    s.setSize(813, 564);
    s.setText("Exploit Pack - Module Editor");
    s.setLayout(new FormLayout());
    final ToolBar bar = new ToolBar(s, SWT.FLAT | SWT.WRAP | SWT.RIGHT);
    FormData fd_bar = new FormData();
    fd_bar.left = new FormAttachment(0);
    fd_bar.right = new FormAttachment(100);
    fd_bar.bottom = new FormAttachment(0, 26);
    fd_bar.top = new FormAttachment(0);
    bar.setLayoutData(fd_bar);
    bar.setBackground(SWTResourceManager.getColor(SWT.COLOR_WHITE));
    
    ToolItem tltmNewItem = new ToolItem(bar, SWT.NONE);
    tltmNewItem.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/1316133906_package.png"));
    tltmNewItem.setText("New Module");
    //          create images for toolbar buttons
//    final Image saveIcon = new Image(d, "save.jpg");
//    final Image openIcon = new Image(d, "open.jpg");
//    final Image childIcon = new Image(d, "userH.ico");
//    final Image cutIcon = new Image(d, "cut.jpg");
//    final Image copyIcon = new Image(d, "copy.jpg");
//    final Image pasteIcon = new Image(d, "paste.jpg");

    //create ToolBar and ToolItems
    final ToolItem openToolItem = new ToolItem(bar, SWT.PUSH);
    openToolItem.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/1316133571_package_go.png"));
    final ToolItem saveToolItem = new ToolItem(bar, SWT.PUSH);
    saveToolItem.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/1316134049_table_save.png"));
    
    @SuppressWarnings("unused")
	ToolItem toolItem = new ToolItem(bar, SWT.SEPARATOR);
    final ToolItem cutToolItem = new ToolItem(bar, SWT.PUSH);
    cutToolItem.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/1316134425_cut_red.png"));
    final ToolItem copyToolItem = new ToolItem(bar, SWT.PUSH);
    copyToolItem.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/1316134439_page_copy.png"));
    final ToolItem pasteToolItem = new ToolItem(bar, SWT.PUSH);
    pasteToolItem.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/1316134460_page_white_paste.png"));

    //          create the menu system
    final Menu m = new Menu(s, SWT.BAR);
    final MenuItem file = new MenuItem(m, SWT.CASCADE);
    final Menu filemenu = new Menu(s, SWT.DROP_DOWN);
    
    MenuItem mntmNewItem_2 = new MenuItem(filemenu, SWT.NONE);
    mntmNewItem_2.setText("New");
    final MenuItem openMenuItem = new MenuItem(filemenu, SWT.PUSH);
    
    new MenuItem(filemenu, SWT.SEPARATOR);
    final MenuItem saveMenuItem = new MenuItem(filemenu, SWT.PUSH);
    
    MenuItem mntmNewItem_3 = new MenuItem(filemenu, SWT.NONE);
    mntmNewItem_3.setText("Save As..");
    
    @SuppressWarnings("unused")
	MenuItem mntmNewItem_6 = new MenuItem(filemenu, SWT.SEPARATOR);
    
    MenuItem mntmNewItem_4 = new MenuItem(filemenu, SWT.NONE);
    mntmNewItem_4.setText("Close");
    
    MenuItem mntmNewItem_5 = new MenuItem(filemenu, SWT.NONE);
    mntmNewItem_5.setText("Close All");
    @SuppressWarnings("unused")
	final MenuItem separator = new MenuItem(filemenu, SWT.SEPARATOR);
    final MenuItem exitMenuItem = new MenuItem(filemenu, SWT.PUSH);
    final MenuItem edit = new MenuItem(m, SWT.CASCADE);
    final Menu editmenu = new Menu(s, SWT.DROP_DOWN);
    final MenuItem cutMenuItem = new MenuItem(editmenu, SWT.PUSH);
    final MenuItem copyMenuItem = new MenuItem(editmenu, SWT.PUSH);
    final MenuItem pasteMenuItem = new MenuItem(editmenu, SWT.PUSH);
    
    MenuItem mntmShellcode = new MenuItem(m, SWT.CASCADE);
    mntmShellcode.setText("Shellcode");
    
    Menu menu = new Menu(mntmShellcode);
    mntmShellcode.setMenu(menu);
    
    MenuItem mntmWindows = new MenuItem(menu, SWT.CASCADE);
    mntmWindows.setText("Windows");
    
    Menu menu_1 = new Menu(mntmWindows);
    mntmWindows.setMenu(menu_1);
    
    MenuItem mntmNewItem_7 = new MenuItem(menu_1, SWT.NONE);
    mntmNewItem_7.addSelectionListener(new SelectionAdapter() {
    	@Override
    	public void widgetSelected(SelectionEvent e) {
    		Module.append("Shellcode = \"\\x29\\xc9\\x83\\xe9\" # Binds a shell at port 4444");
    	}
    });
    mntmNewItem_7.setText("x86.w32.tcp4444");
    
    MenuItem mntmNewItem_9 = new MenuItem(menu_1, SWT.NONE);
    mntmNewItem_9.setText("x86.w32.msg ");
    
    MenuItem mntmNewItem_8 = new MenuItem(menu_1, SWT.NONE);
    mntmNewItem_8.setText("x86.w32.adduser");
    
    MenuItem mntmNewItem_10 = new MenuItem(menu_1, SWT.NONE);
    mntmNewItem_10.setText("x86.w32.cmd");
    
    MenuItem mntmNewSubmenu = new MenuItem(menu, SWT.CASCADE);
    mntmNewSubmenu.setText("Linux");
    
    Menu menu_2 = new Menu(mntmNewSubmenu);
    mntmNewSubmenu.setMenu(menu_2);
    
    MenuItem mntmNewItem_11 = new MenuItem(menu_2, SWT.NONE);
    mntmNewItem_11.setText("x86.linux.bind4444 ");
    
    MenuItem mntmNewItem_12 = new MenuItem(menu_2, SWT.NONE);
    mntmNewItem_12.setText("x86.linux.adduser");
    
    MenuItem mntmNewItem_13 = new MenuItem(menu_2, SWT.NONE);
    mntmNewItem_13.setText("x86.linux.binsh");
    
    MenuItem mntmNewSubmenu_1 = new MenuItem(menu, SWT.CASCADE);
    mntmNewSubmenu_1.setText("BSD");
    
    Menu menu_3 = new Menu(mntmNewSubmenu_1);
    mntmNewSubmenu_1.setMenu(menu_3);
    
    MenuItem mntmNewItem_14 = new MenuItem(menu_3, SWT.NONE);
    mntmNewItem_14.setText("x86.bsd.bind4444");
    
    MenuItem mntmNewItem_15 = new MenuItem(menu_3, SWT.NONE);
    mntmNewItem_15.setText("x86.bsd.suidsh ");
    
    MenuItem mntmNewSubmenu_2 = new MenuItem(menu, SWT.CASCADE);
    mntmNewSubmenu_2.setText("OSX");
    
    Menu menu_4 = new Menu(mntmNewSubmenu_2);
    mntmNewSubmenu_2.setMenu(menu_4);
    
    MenuItem mntmNewItem_16 = new MenuItem(menu_4, SWT.NONE);
    mntmNewItem_16.setText("ppc.osx.bind4444");
    
    MenuItem mntmNewItem_17 = new MenuItem(menu_4, SWT.NONE);
    mntmNewItem_17.setText("ppc.osx.adduser ");
    
    MenuItem mntmNewItem_18 = new MenuItem(menu_4, SWT.NONE);
    mntmNewItem_18.setText("ppc.osx.binsh");
    
    MenuItem mntmNewItem_19 = new MenuItem(menu_4, SWT.NONE);
    mntmNewItem_19.setText("ppc.osx.reboot");
    final MenuItem help = new MenuItem(m, SWT.CASCADE);
    final Menu helpmenu = new Menu(s, SWT.DROP_DOWN);
    
    MenuItem mntmNewItem = new MenuItem(helpmenu, SWT.NONE);
    mntmNewItem.setText("Search Help Online");
    
    MenuItem mntmNewItem_1 = new MenuItem(helpmenu, SWT.NONE);
    mntmNewItem_1.setText("Tutorials");
    
    MenuItem menuItem = new MenuItem(helpmenu, SWT.SEPARATOR);
    menuItem.setText("");
    final MenuItem aboutMenuItem = new MenuItem(helpmenu, SWT.PUSH);

    //create reusable named inner classes for SelectionListeners
    class Open extends SelectionAdapter {
      @Override
	public void widgetSelected(SelectionEvent event) {
        FileDialog fileDialog = new FileDialog(s, SWT.OPEN);
        fileDialog.setText("Open");
        String codedir = "exploits/code";
        fileDialog.setFilterPath(codedir);
        String[] filterExt = { "*.py", "*.*" };
        fileDialog.setFilterExtensions(filterExt);
        String selected = fileDialog.open();
        if (selected == null)
          return;
        // code here to open the file and display
        FileReader file = null;
        try {
          file = new FileReader(selected);
        } catch (FileNotFoundException e) {
          MessageBox messageBox = new MessageBox(s, SWT.ICON_ERROR
              | SWT.OK);
          messageBox.setMessage("Could not open file.");
          messageBox.setText("Error");
          messageBox.open();
          return;
        }
        BufferedReader fileInput = new BufferedReader(file);
        String text = null;
        StringBuffer sb = new StringBuffer();
        try {
          do {
            if (text != null)
              sb.append(text);
          } while ((text = fileInput.readLine()) != null);
        } catch (IOException e1) {
          MessageBox messageBox = new MessageBox(s, SWT.ICON_ERROR
              | SWT.OK);
          messageBox.setMessage("Could not write to file.");
          messageBox.setText("Error");
          messageBox.open();
          return;
        }
        Module.setText(sb.toString());
      }
    }

    class Save extends SelectionAdapter {
      @Override
	public void widgetSelected(SelectionEvent event) {

      }
    }

    class Cut extends SelectionAdapter {
      @Override
	public void widgetSelected(SelectionEvent event) {
    	  Module.cut();
      }
    }

    class Copy extends SelectionAdapter {
      @Override
	public void widgetSelected(SelectionEvent event) {
    	  Module.copy();
      }
    }

    class Paste extends SelectionAdapter {
      @Override
	public void widgetSelected(SelectionEvent event) {
    	  Module.paste();
      }
    }

    //Configure the ToolBar
//    openToolItem.setImage(openIcon);
    openToolItem.setText("Open Module");
    openToolItem.setToolTipText("Open File");
//    saveToolItem.setImage(saveIcon);
    saveToolItem.setText("Save Module");
    saveToolItem.setToolTipText("Save File");
//    cutToolItem.setImage(cutIcon);
    cutToolItem.setText("Cut");
    cutToolItem.setToolTipText("Cut");
//    copyToolItem.setImage(copyIcon);
    copyToolItem.setText("Copy");
    copyToolItem.setToolTipText("Copy");
 //   pasteToolItem.setImage(pasteIcon);
    pasteToolItem.setText("Paste");
    pasteToolItem.setToolTipText("Paste");
    
    @SuppressWarnings("unused")
	ToolItem toolItem_1 = new ToolItem(bar, SWT.SEPARATOR);
    
    ToolItem tltmNewItem_1 = new ToolItem(bar, SWT.NONE);
    tltmNewItem_1.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/arrow_undo.png"));
    
    ToolItem tltmNewItem_2 = new ToolItem(bar, SWT.NONE);
    tltmNewItem_2.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/arrow_redo.png"));
    
    @SuppressWarnings("unused")
	ToolItem toolItem_2 = new ToolItem(bar, SWT.SEPARATOR);
    
    ToolItem tltmNewItem_3 = new ToolItem(bar, SWT.NONE);
    tltmNewItem_3.setImage(SWTResourceManager.getImage(SWTTextEditor.class, "/resources/find.png"));
    tltmNewItem_3.setText("Find");

    //add SelectionListeners to the toolbar buttons
    openToolItem.addSelectionListener(new Open());
    saveToolItem.addSelectionListener(new Save());
    cutToolItem.addSelectionListener(new Cut());
    copyToolItem.addSelectionListener(new Copy());
    pasteToolItem.addSelectionListener(new Paste());

    //Configure the menu items
    file.setText("&File");
    file.setMenu(filemenu);
    openMenuItem.setText("&Open File...\tCTRL+O");
    openMenuItem.setAccelerator(SWT.CTRL + 'O');
    saveMenuItem.setText("&Save\tCTRL+S");
    saveMenuItem.setAccelerator(SWT.CTRL + 'S');
    exitMenuItem.setText("E&xit");
    edit.setText("&Edit");
    edit.setMenu(editmenu);
    cutMenuItem.setText("&Cut");
    copyMenuItem.setText("Co&py");
    pasteMenuItem.setText("&Paste");
    help.setText("&Help");
    help.setMenu(helpmenu);
    aboutMenuItem.setText("&About - Module Editor");

    // add SelectionListeners for the menu items
    openMenuItem.addSelectionListener(new Open());
    saveMenuItem.addSelectionListener(new Save());
    exitMenuItem.addSelectionListener(new SelectionAdapter() {
      @Override
	public void widgetSelected(SelectionEvent e) {
        System.exit(0);
      }
    });
    cutMenuItem.addSelectionListener(new Cut());
    copyMenuItem.addSelectionListener(new Copy());
    pasteMenuItem.addSelectionListener(new Paste());
    aboutMenuItem.addSelectionListener(new SelectionAdapter() {
      @Override
	public void widgetSelected(SelectionEvent e) {
        AboutDialog ad = new AboutDialog(s);
        ad.open();
      }
    });
    s.setMenuBar(m);
    
    TabFolder tabFolder = new TabFolder(s, SWT.NONE);
    FormData fd_tabFolder = new FormData();
    fd_tabFolder.top = new FormAttachment(0, 32);
    fd_tabFolder.left = new FormAttachment(0);
    fd_tabFolder.bottom = new FormAttachment(0, 510);
    fd_tabFolder.right = new FormAttachment(0, 805);
    tabFolder.setLayoutData(fd_tabFolder);
    
    TabItem tbtmNewModule = new TabItem(tabFolder, SWT.NONE);
    tbtmNewModule.setText("New Module");
    
    Module = new Text(tabFolder, SWT.BORDER | SWT.WRAP | SWT.H_SCROLL | SWT.V_SCROLL | SWT.CANCEL | SWT.MULTI);
    tbtmNewModule.setControl(Module);
    s.open();
    while (!s.isDisposed()) {
      if (!d.readAndDispatch())
        d.sleep();
    }
    d.dispose();
  }

  // include a main method to make the class executable
  public static void main(String[] args) {
    @SuppressWarnings("unused")
	SWTTextEditor ste = new SWTTextEditor();
  }
}

class AboutDialog extends Dialog {
  AboutDialog(Shell parent) {
    super(parent);
  }

  public void open() {
    Shell parent = getParent();
    final Shell dialog = new Shell(parent, SWT.DIALOG_TRIM
        | SWT.APPLICATION_MODAL);
    dialog.setSize(200, 100);
    dialog.setText("About");
    final Label l = new Label(dialog, SWT.NONE);
    l.setText("An SWT Text Editor");
    l.setBounds(43, 20, 100, 20);
    Button b = new Button(dialog, SWT.PUSH | SWT.BORDER);
    b.setText("OK");
    b.setBounds(80, 45, 40, 25);
    b.addSelectionListener(new SelectionAdapter() {
      @Override
	public void widgetSelected(SelectionEvent e) {
        dialog.dispose();
      }
    });
    dialog.open();
    Display display = parent.getDisplay();
    while (!dialog.isDisposed()) {
      if (!display.readAndDispatch())
        display.sleep();
    }
  }
}
