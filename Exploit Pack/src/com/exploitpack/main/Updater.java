package com.exploitpack.main;

import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.net.URLConnection;
import java.util.Date;

import org.eclipse.swt.SWT;
import org.eclipse.swt.events.SelectionAdapter;
import org.eclipse.swt.events.SelectionEvent;
import org.eclipse.swt.graphics.Rectangle;
import org.eclipse.swt.widgets.Button;
import org.eclipse.swt.widgets.Display;
import org.eclipse.swt.widgets.Label;
import org.eclipse.swt.widgets.ProgressBar;
import org.eclipse.swt.widgets.Shell;
import org.eclipse.swt.widgets.Text;
import org.eclipse.wb.swt.SWTResourceManager;

public class Updater {

	protected Shell shlExploitPack;
	private Text progressDownload;

	/**
	 * Launch the application.
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		try {
			Updater window = new Updater();
			window.open();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Open the window.
	 */
	public void open() {
		Display display = Display.getDefault();
		createContents();
		Rectangle bounds = display.getBounds();
		Rectangle rect = shlExploitPack.getBounds();

		int x = bounds.x + (bounds.width - rect.width) / 2;
		int y = bounds.y + (bounds.height - rect.height) / 2;

		shlExploitPack.setLocation(x, y);
		shlExploitPack.open();
		shlExploitPack.layout();
		while (!shlExploitPack.isDisposed()) {
			if (!display.readAndDispatch()) {
				display.sleep();
			}
		}
	}

	/**
	 * Create contents of the window.
	 */
	protected void createContents() {
		shlExploitPack = new Shell();

		shlExploitPack.setImage(SWTResourceManager.getImage(Updater.class, "/resources/1316133906_package.png"));
		shlExploitPack.setSize(450, 239);
		shlExploitPack.setText("Exploit Pack - Update Manager");
		progressDownload = new Text(shlExploitPack, SWT.BORDER | SWT.V_SCROLL | SWT.MULTI);
		progressDownload.setText("Running update manager, this could take a while...\r\nPlease wait!\r\n");
		progressDownload.setBounds(10, 64, 415, 96);

		Button btnNewButton = new Button(shlExploitPack, SWT.NONE);
		btnNewButton.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				shlExploitPack.dispose();
			}
		});
		btnNewButton.setBounds(350, 166, 75, 25);
		btnNewButton.setText("Close");

		Label lblNewLabel = new Label(shlExploitPack, SWT.NONE);
		lblNewLabel.setImage(SWTResourceManager.getImage(Updater.class, "/resources/updater.png"));
		lblNewLabel.setBounds(21, 10, 56, 48);

		Label lblNewLabel_1 = new Label(shlExploitPack, SWT.NONE);
		lblNewLabel_1.setBounds(89, 10, 113, 15);
		lblNewLabel_1.setText("Checking for updates");

		final ProgressBar progressBar = new ProgressBar(shlExploitPack, SWT.NONE);
		progressBar.setBounds(89, 31, 335, 17);

		progressBar.setMaximum(100);
		
		final Button btnUpdateNow = new Button(shlExploitPack, SWT.NONE);
		btnUpdateNow.addSelectionListener(new SelectionAdapter() {
			@Override
			public void widgetSelected(SelectionEvent e) {
				// First download index of module
				try {
					URL url = new URL("http://exploitpack.com/download/modules/index/module.list");
					progressDownload.append("Contacting official server: http://exploitpack.com" + "\n");
					progressDownload.append("Downloading module: " + "index of modules" + "\n");
					URLConnection urlC = url.openConnection();
					// Copy resource to local file, use remote file
					// if no local file name specified
					InputStream is = url.openStream();
					// Print info about resource
					progressDownload.append("Copying resource: " + urlC.getContentType() + "\n");
					Date date = new Date(urlC.getLastModified());
					progressDownload.append("Modified on: " + date.toString() + "\n");
					FileOutputStream fos = null;

					String localFile = null;
					// Get only file name
					localFile = "exploits/index/" + "module.list";
					fos = new FileOutputStream(localFile);

					int oneChar, count = 0;
					while ((oneChar = is.read()) != -1) {
						fos.write(oneChar);
						count++;
					}
					is.close();
					fos.close();
					progressDownload.append(count + " byte(s) copied");
					progressBar.setSelection(10);
				} catch (Exception e1) {
					System.out.println(e1);
				}

				// Download index of xml
				try {
					URL url = new URL("http://exploitpack.com/download/modules/index/xml.list");
					progressDownload.append("Contacting official server: http://exploitpack.com" + "\n");
					progressDownload.append("Downloading module: " + "index of xml" + "\n");
					URLConnection urlC = url.openConnection();
					// Copy resource to local file, use remote file
					// if no local file name specified
					InputStream is = url.openStream();
					// Print info about resource
					progressDownload.append("Copying resource: " + urlC.getContentType() + "\n");
					Date date = new Date(urlC.getLastModified());
					progressDownload.append("Modified on: " + date.toString() + "\n");
					FileOutputStream fos = null;

					String localFile = null;
					// Get only file name
					localFile = "exploits/index/" + "xml.list";
					fos = new FileOutputStream(localFile);

					int oneChar, count = 0;
					while ((oneChar = is.read()) != -1) {
						fos.write(oneChar);
						count++;
					}
					is.close();
					fos.close();
					progressDownload.append(count + " byte(s) copied");
				} catch (Exception e1) {
					System.out.println(e1);
				}
				progressBar.setSelection(40);
				
				// Download index of data
				try {
					URL url = new URL("http://exploitpack.com/download/modules/index/data.list");
					progressDownload.append("Contacting official server: http://exploitpack.com" + "\n");
					progressDownload.append("Downloading module: " + "index of data" + "\n");
					URLConnection urlC = url.openConnection();
					// Copy resource to local file, use remote file
					// if no local file name specified
					InputStream is = url.openStream();
					// Print info about resource
					progressDownload.append("Copying resource: " + urlC.getContentType() + "\n");
					Date date = new Date(urlC.getLastModified());
					progressDownload.append("Modified on: " + date.toString() + "\n");
					FileOutputStream fos = null;

					String localFile = null;
					// Get only file name
					localFile = "exploits/index/" + "data.list";
					fos = new FileOutputStream(localFile);

					int oneChar, count = 0;
					while ((oneChar = is.read()) != -1) {
						fos.write(oneChar);
						count++;
					}
					is.close();
					fos.close();
					progressDownload.append(count + " byte(s) copied");
				} catch (Exception e1) {
					System.out.println(e1);
				}
				progressBar.setSelection(70);
				// Read module list and download files
				try {
					// Create file
					FileInputStream  fstream = new FileInputStream ("exploits/index/module.list");
					DataInputStream in = new DataInputStream(fstream);
					BufferedReader br = new BufferedReader(new InputStreamReader(in));
					String strLine;
					
					while ((strLine = br.readLine()) != null) {
						// Download index of data
						try {
							URL url = new URL("http://exploitpack.com/download/modules/code/" + strLine);
							progressDownload.append("Contacting official server: http://exploitpack.com" + "\n");
							progressDownload.append("Downloading module: " + strLine + "\n");
							URLConnection urlC = url.openConnection();
							// Copy resource to local file, use remote file
							// if no local file name specified
							InputStream is = url.openStream();
							// Print info about resource
							progressDownload.append("Copying resource: " + urlC.getContentType() + "\n");
							Date date = new Date(urlC.getLastModified());
							progressDownload.append("Modified on: " + date.toString() + "\n");
							FileOutputStream fos = null;

							String localFile = null;
							// Get only file name
							localFile = "exploits/code/" + strLine;
							fos = new FileOutputStream(localFile);

							int oneChar, count = 0;
							while ((oneChar = is.read()) != -1) {
								fos.write(oneChar);
								count++;
							}
							is.close();
							fos.close();
							progressDownload.append(count + " byte(s) copied\n");
						} catch (Exception e1) {
							System.out.println(e1);
						}
					}
					// Close the output stream
					in.close();
				} catch (Exception e1) {
					// Catch exception if any
					System.err.println("Error: " + e1.getMessage());
				}
				progressBar.setSelection(90);
				// Read xml list and download files
				try {
					// Create file
					FileInputStream  fstream = new FileInputStream ("exploits/index/xml.list");
					DataInputStream in = new DataInputStream(fstream);
					BufferedReader br = new BufferedReader(new InputStreamReader(in));
					String strLine;
					
					while ((strLine = br.readLine()) != null) {
						// Download index of data
						try {
							URL url = new URL("http://exploitpack.com/download/modules/" + strLine);
							progressDownload.append("Contacting official server: http://exploitpack.com" + "\n");
							progressDownload.append("Downloading xml: " + strLine + "\n");
							URLConnection urlC = url.openConnection();
							// Copy resource to local file, use remote file
							// if no local file name specified
							InputStream is = url.openStream();
							// Print info about resource
							progressDownload.append("Copying resource: " + urlC.getContentType() + "\n");
							Date date = new Date(urlC.getLastModified());
							progressDownload.append("Modified on: " + date.toString() + "\n");
							FileOutputStream fos = null;

							String localFile = null;
							// Get only file name
							localFile = "exploits/" + strLine;
							fos = new FileOutputStream(localFile);

							int oneChar, count = 0;
							while ((oneChar = is.read()) != -1) {
								fos.write(oneChar);
								count++;
							}
							is.close();
							fos.close();
							progressDownload.append(count + " byte(s) copied\n");
						} catch (Exception e1) {
							System.out.println(e1);
						}
					}
					// Close the output stream
					in.close();
				} catch (Exception e1) {
					// Catch exception if any
					System.err.println("Error: " + e1.getMessage());
				}
				progressBar.setSelection(95);
				
				// Read data list and download files
				try {
					// Create file
					FileInputStream  fstream = new FileInputStream ("exploits/index/data.list");
					DataInputStream in = new DataInputStream(fstream);
					BufferedReader br = new BufferedReader(new InputStreamReader(in));
					String strLine;
					
					while ((strLine = br.readLine()) != null) {
						// Download index of data
						try {
							URL url = new URL("http://exploitpack.com/download/modules/code/data/" + strLine);
							progressDownload.append("Contacting official server: http://exploitpack.com" + "\n");
							progressDownload.append("Downloading data: " + strLine + "\n");
							URLConnection urlC = url.openConnection();
							// Copy resource to local file, use remote file
							// if no local file name specified
							InputStream is = url.openStream();
							// Print info about resource
							progressDownload.append("Copying resource: " + urlC.getContentType() + "\n");
							Date date = new Date(urlC.getLastModified());
							progressDownload.append("Modified on: " + date.toString() + "\n");
							FileOutputStream fos = null;

							String localFile = null;
							// Get only file name
							localFile = "exploits/code/data/" + strLine;
							fos = new FileOutputStream(localFile);

							int oneChar, count = 0;
							while ((oneChar = is.read()) != -1) {
								fos.write(oneChar);
								count++;
							}
							is.close();
							fos.close();
							progressDownload.append(count + " byte(s) copied\n");
						} catch (Exception e1) {
							System.out.println(e1);
						}
					}
					// Close the output stream
					in.close();
				} catch (Exception e1) {
					// Catch exception if any
					System.err.println("Error: " + e1.getMessage());
				}
				progressBar.setSelection(100);
				
				// Finally
				progressDownload.append("Update has been done successfully! \n");
				btnUpdateNow.setEnabled(false);
			}
		});
		btnUpdateNow.setBounds(269, 166, 75, 25);
		btnUpdateNow.setText("Update");

	}
}
