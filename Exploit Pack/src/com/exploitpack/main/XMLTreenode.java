/**
Exploit Pack - Security Framework for Exploit Developers
Copyright 2011 Juan Sacco http://exploitpack.com

This program is free software: you can redistribute it and/or modify it under the terms of the
GNU General Public License as published by the Free Software Foundation, either version 3 
or any later version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with this program. 
If not, see http://www.gnu.org/licenses/
 **/

package com.exploitpack.main;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;

/**
 * Esta clase carga carga los XML para que los parsee exploit pack
 * 
 * @author Juan Sacco
 * 
 **/

public class XMLTreenode {
	public String ExploitName;
	public String CodeName;
	public String ExploitType;
	public String Platform;
	public String Service;
	public String RemotePort;
	public String LocalPort;
	public String ShellPort;
	public String ShellcodeAvailable;
	public String Vulnerability;
	public String Author;
	public String Information;
	public String Date;
	public String Targets;
	public String SpecialArgs;

	public void main(String[] args, String XMLName) {

		try {
			// Implementación DOM por defecto de Java
			// Construimos nuestro DocumentBuilder
			DocumentBuilder documentBuilder = DocumentBuilderFactory.newInstance().newDocumentBuilder();

			// Procesamos el fichero XML y obtenemos nuestro objeto Document
			Document doc = documentBuilder.parse(new InputSource(new FileInputStream("exploits/" + XMLName)));

			// ExploitName y sus atributos
			Node Exploit = (Node) (XPathFactory.newInstance().newXPath().evaluate("/Module/Exploit", doc, XPathConstants.NODE));
			if (Exploit != null) {
				ExploitName = Exploit.getAttributes().getNamedItem("NameXML").getTextContent();
				CodeName = Exploit.getAttributes().getNamedItem("CodeName").getTextContent();
				Service = Exploit.getAttributes().getNamedItem("Service").getTextContent();
				Platform = Exploit.getAttributes().getNamedItem("Platform").getTextContent();
				ExploitType = Exploit.getAttributes().getNamedItem("Type").getTextContent();
				RemotePort = Exploit.getAttributes().getNamedItem("RemotePort").getTextContent();
				LocalPort = Exploit.getAttributes().getNamedItem("LocalPort").getTextContent();
				ShellcodeAvailable = Exploit.getAttributes().getNamedItem("ShellcodeAvailable").getTextContent();
				ShellPort = Exploit.getAttributes().getNamedItem("ShellPort").getTextContent();
				SpecialArgs = Exploit.getAttributes().getNamedItem("SpecialArgs").getTextContent();

			}

			// Information y sus atributos
			Node Info = (Node) (XPathFactory.newInstance().newXPath().evaluate("/Module/Information", doc, XPathConstants.NODE));
			if (Info != null) {
				Information = Info.getTextContent();
				Author = Info.getAttributes().getNamedItem("Author").getTextContent();
				Date = Info.getAttributes().getNamedItem("Date").getTextContent();
				Vulnerability = Info.getAttributes().getNamedItem("Vulnerability").getTextContent();
			}

			// Target y sus atributos
			Node Target = (Node) (XPathFactory.newInstance().newXPath().evaluate("/Module/Targets", doc, XPathConstants.NODE));
			if (Targets != null) {
				Targets = Target.getTextContent();
			}

			// Obtenemos la etiqueta raiz
			Element elementRaiz = doc.getDocumentElement();
			// Iteramos sobre sus hijos
			NodeList hijos = elementRaiz.getChildNodes();
			for (int i = 0; i < hijos.getLength(); i++) {
				Node nodo = hijos.item(i);
				if (nodo instanceof Element) {
				}
			}

		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (SAXException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		} catch (XPathExpressionException e) {
			e.printStackTrace();
		} catch (ParserConfigurationException e) {
			e.printStackTrace();
		}

	}

}
